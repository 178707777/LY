
#user  nobody;
worker_processes  4;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    
    #10.44.0.4:6379 10.44.0.5:6379 10.44.0.8:6379
    upstream redis_cluster {
        server 10.32.0.5:6379;
        server 10.32.0.6:6379;
        server 10.38.0.2:6379;
    }

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        # GET /set?key=key&val=val
        location = /set {
            redis2_next_upstream error timeout invalid_response;
            set $key $arg_key;  # this requires ngx_set_misc
            set $val $arg_val;  # this requires ngx_set_misc
            redis2_query set $key $val;
            redis2_pass redis_cluster;
        }

        location = /hgetall {
             content_by_lua_block {
                local key = ngx.var.arg_key
                local cjson = require("cjson")
                local redis_cluster = require("redis_cluster")
                local cluster_id = "test_cluster"
                local startup_nodes = {
                    {"10.1.171.242", 6379},
                    {"10.1.171.242", 6380},
                    {"10.1.171.242", 6381}
                }
                local opt = {
                    timeout = 100,
                    keepalive_size = 100,
                    keepalive_duration = 60000
                }
                local rc = redis_cluster:new(cluster_id, startup_nodes, opt)
                rc:initialize()
                res, err = rc:hgetall(key)
                if not res then
                ngx.say(err)
                else
                ngx.say(res)
                end
            }
        }

        location = /set2 {
   	    content_by_lua_block {
                local key = ngx.var.arg_key
                local val = ngx.var.arg_val
                local redis_cluster = require("redis_cluster")
                local cluster_id = "test_cluster"
                local startup_nodes = {
                    {"10.38.0.5", 6379}, 
                    {"10.37.0.6", 6379}, 
                    {"10.32.0.7", 6379}
                }
                local opt = { 
                    timeout = 100,
                    keepalive_size = 100,
                    keepalive_duration = 60000
                }
                local rc = redis_cluster:new(cluster_id, startup_nodes, opt)
                rc:initialize()
                res, err = rc:set(key, val)
                if not res then
                ngx.say(err)
                else
                ngx.say(res)
                end
	    }	
        }

        location = /get2 {
            content_by_lua_block {
                local key = ngx.var.arg_key
                local redis_cluster = require("redis_cluster")
                local cluster_id = "test_cluster"
                local startup_nodes = {
                    {"10.38.0.5", 6379},   
                    {"10.37.0.6", 6379},   
                    {"10.32.0.7", 6379}
                }
                local opt = {
                    timeout = 100,
                    keepalive_size = 100,
                    keepalive_duration = 60000
                }
                local rc = redis_cluster:new(cluster_id, startup_nodes, opt)
                rc:initialize()
                res, err = rc:get(key)
                if not res then
                ngx.say(err)
                else
                ngx.say(res)
                end
            }
        }  


        # redirect server error pages to the static page /50x.html
        #
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}

    }
    

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
