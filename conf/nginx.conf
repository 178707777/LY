#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    
    #10.44.0.4:6379 10.44.0.5:6379 10.44.0.8:6379
    upstream redis_cluster {
        server 10.32.0.5:6379;
        server 10.32.0.6:6379;
        server 10.38.0.2:6379;
    }
    
    lua_shared_dict prometheus_metrics 10M;
    init_by_lua '
        prometheus = require("prometheus").init("prometheus_metrics")
        metric_requests = prometheus:counter(
            "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
        metric_latency = prometheus:histogram(
            "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
        metric_connections = prometheus:gauge(
            "nginx_http_connections", "Number of HTTP connections", {"state"})
    ';
    log_by_lua '
        local host = ngx.var.host:gsub("^www.", "")
        metric_requests:inc(1, {host, ngx.var.status})
        metric_latency:observe(ngx.now() - ngx.req.start_time(), {host})
    ';

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        # GET /set?key=key&val=val
        location = /set {
        }

        location = /hgetall {
             content_by_lua_block {
                local key = ngx.var.arg_key
                local cjson = require("cjson")
                local redis_cluster = require("redis_cluster")
                local cluster_id = "test_cluster"
                local startup_nodes = {
                    {"10.1.171.242", 6379},
                    {"10.1.171.242", 6380},
                    {"10.1.171.242", 6381}
                }
                local opt = {
                    timeout = 100,
                    keepalive_size = 100,
                    keepalive_duration = 60000
                }
                local rc = redis_cluster:new(cluster_id, startup_nodes, opt)
                rc:initialize()
                res, err = rc:hgetall(key)
                if not res then
                ngx.say(err)
                else
                ngx.say(res)
                end
            }
        }
        
        location = /matchdetail {
            content_by_lua_block {
                local jsonscript = ngx.var.arg_jsonscript
                local redis_cluster = require("redis_cluster")
                local cluster_id = "242"
                local cjson = require("cjson")
                local decode_script = cjson.decode(jsonscript)
                local startup_nodes = {
                    {"10.1.171.242", 6379},
                    {"10.1.171.242", 6380},
                    {"10.1.171.242", 6381}
                }
                local opt = {
                    timeout = 100,
                    keepalive_size = 100,
                    keepalive_duration = 60000
                }
                local rc = redis_cluster:new(cluster_id, startup_nodes, opt)
                rc:initialize()
                if decode_script[1]["operation"]=="INSERT" then
                    local key = "matchdetail." .. decode_script[1]["fields"]["serverid"] .. "." .. decode_script[1]["fields"]["market"] .. "." .. decode_script[1]["fields"]["matchcode"] .. "." .. decode_script[1]["fields"]["orderid"] .. "." .. decode_script[1]["fields"]["matchtype"] .. "." .. decode_script[1]["fields"]["rptbs"]
                     local res, err = rc:hmset(key, "serverid", decode_script[1]["fields"]["serverid"], "matchsno",decode_script[1]["fields"]["matchsno"],"market",decode_script[1]["fields"]["market"],"matchprice",decode_script[1]["fields"]["matchprice"],"matchqty",decode_script[1]["fields"]["matchqty"],"matchcode",decode_script[1]["fields"]["matchcode"],"orderid",decode_script[1]["fields"]["orderid"],"matchtype",decode_script[1]["fields"]["matchtype"],"rptbs",decode_script[1]["fields"]["rptbs"],"orgid",decode_script[1]["fields"]["orgid"],"setno",decode_script[1]["fields"]["setno"],"sequsno",decode_script[1]["fields"]["sequsno"])
                    if not res then
                        ngx.say(err)
                    else
                        ngx.say(res)
                    end
                else
                    ngx.say("other function")
                end
            }
        }

        location = /set2 {
   	    content_by_lua_block {
                local key = ngx.var.arg_key
                local val = ngx.var.arg_val
                local redis_cluster = require("redis_cluster")
                local cluster_id = "test_cluster"
                local startup_nodes = {
                    {"10.1.171.242", 6379}, 
                    {"10.1.171.242", 6380}, 
                    {"10.1.171.242", 6381}
                }
                local opt = { 
                    timeout = 100,
                    keepalive_size = 100,
                    keepalive_duration = 60000
                }
                local rc = redis_cluster:new(cluster_id, startup_nodes, opt)
                rc:initialize()
                rc:set(key, val)
	    }	
        }

        location = /get2 {
            content_by_lua_block {
                local key = ngx.var.arg_key
                local redis_cluster = require("redis_cluster")
                local cluster_id = "test_cluster"
                local startup_nodes = {
                    {"10.1.171.242", 6379},
                    {"10.1.171.242", 6380},
                    {"10.1.171.242", 6381}
                }
                local opt = {
                    timeout = 100,
                    keepalive_size = 100,
                    keepalive_duration = 60000
                }
                local rc = redis_cluster:new(cluster_id, startup_nodes, opt)
                rc:initialize()
                rc:get(key)
            }
        }  

        location = /set3 {
            content_by_lua_block {
                local redis_cluster = require("redis_cluster")
                local cluster_id = "test_cluster"
                local startup_nodes = {
                    {"10.44.0.4", 6379},
                    {"10.44.0.5", 6379},
                    {"10.44.0.8", 6379}
                }
                local opt = {
                    timeout = 100,
                    keepalive_size = 100,
                    keepalive_duration = 60000
                }
                local rc = redis_cluster:new(cluster_id, startup_nodes, opt)
                rc:initialize()
                rc:multi() 
                rc:send_cluster_command("rpush", "course", "algorithm")
                rc:send_cluster_command("rpush", "course", "c++")
                rc:send_cluster_command("lpop", "course")

                rc:send_cluster_command("sadd", "bbs", "discuz.net")
                rc.exec()
            }
        }

        location /metrics {
            content_by_lua '
                metric_connections:set(ngx.var.connections_reading, {"reading"})
                metric_connections:set(ngx.var.connections_waiting, {"waiting"})
                metric_connections:set(ngx.var.connections_writing, {"writing"})
                prometheus:collect()
            ';
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}

    }
    
    server {
        listen 9145;
        allow 10.1.171.242;
        deny all;
        location /metrics {
            content_by_lua '
                metric_connections:set(ngx.var.connections_reading, {"reading"})
                metric_connections:set(ngx.var.connections_waiting, {"waiting"})
                metric_connections:set(ngx.var.connections_writing, {"writing"})
                prometheus:collect()
            ';
        }
    }

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
