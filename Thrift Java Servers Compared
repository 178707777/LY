1、TSimpleServer
TSimplerServer只有一个线程以阻塞I/O的方式接受客户端请求，其他客户端在被服务器端接受之前都只能等待，不可用于生产环境

2、TNonblockingServer
TNonblockingServer使用非阻塞I/O解决TSimpleServer一个客户端阻塞其他客户端的问题，
使用java.nio.channels.Selector，通过调用select()，可以阻塞多个连接，
当一或多个连接准备好被接受读写时，select()调用便会返回，
但所有连接是被调用select()方法的同一个线程处理的，仍然会出现等待select线程的问题

3、THsHaServer
THsHaServer使用一个单独的线程来处理网络I/O，一个独立的worker线程池来处理消息，
只要有空闲的worker线程，消息就会被立即处理，因此多条消息能被并行处理

4、TThreadedSelectorServer

TThreadedSelectorServer维护了两个线程池，一个用来处理网络I/O，另一个用来进行请求的处理，
当网络I/O是瓶颈的时候，TThreadedSelectorServer比THsHaServer的表现要好

5、TThreadPoolServer
